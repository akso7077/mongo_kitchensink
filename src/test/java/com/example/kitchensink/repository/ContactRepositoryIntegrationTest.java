package com.example.kitchensink.repository;

import com.example.kitchensink.model.Contact; // Import your Contact model
import org.junit.jupiter.api.AfterEach; // Import for cleanup
import org.junit.jupiter.api.BeforeEach; // Import for setup
import org.junit.jupiter.api.Test; // Import for test methods
import org.springframework.beans.factory.annotation.Autowired; // Import for dependency injection
import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest; // Import for @DataMongoTest
import org.springframework.test.context.ActiveProfiles; // Optional: for test profiles

import java.time.Instant; // Assuming createdAt/updatedAt use Instant
import java.util.List; // For list results
import java.util.Optional; // For Optional results

import static org.assertj.core.api.Assertions.assertThat; // For assertions

@ActiveProfiles("test") // Optional: activate a 'test' profile if needed
@DataMongoTest // This annotation configures an in-memory MongoDB and Spring Data Mongo repositories
class ContactRepositoryIntegrationTest {

    @Autowired
    private ContactRepository contactRepository; // Inject the repository you want to test

    @BeforeEach // Runs before each test method
    void setUp() {
        // Clean the collection before each test to ensure test isolation
        contactRepository.deleteAll();
    }

    @AfterEach // Runs after each test method (optional, but good practice)
    void tearDown() {
        // Clean the collection after each test as well
        contactRepository.deleteAll();
    }

    // --- Basic CRUD Tests (Inherited from MongoRepository) ---

    @Test
    void testSaveContact_Success() {
        // Arrange: Create a new contact
        Contact contact = new Contact();
        contact.setName("Test Contact");
        contact.setEmail("test@example.com");
        contact.setPhoneNumber("1234567890");
        contact.setCreatedBy("testuser");
        // Set timestamps if they are not auto-generated by auditing in tests
        if (contact.getCreatedAt() == null) contact.setCreatedAt(Instant.now());
        if (contact.getUpdatedAt() == null) contact.setUpdatedAt(Instant.now());


        // Act: Save the contact using the repository
        Contact savedContact = contactRepository.save(contact);

        // Assert: Verify the contact was saved and has an ID
        assertThat(savedContact).isNotNull();
        assertThat(savedContact.getId()).isNotNull();
        assertThat(savedContact.getName()).isEqualTo("Test Contact");

        // Optional: Verify it exists in the database by fetching it back
        Optional<Contact> foundContact = contactRepository.findById(savedContact.getId());
        assertThat(foundContact).isPresent();
        assertThat(foundContact.get().getName()).isEqualTo("Test Contact");
    }

    @Test
    void testFindById_ContactExists() {
        // Arrange: Save a contact first
        Contact contact = new Contact();
        contact.setName("Find Me");
        contact.setEmail("findme@example.com");
        contact.setPhoneNumber("0987654321");
        contact.setCreatedBy("finder");
        if (contact.getCreatedAt() == null) contact.setCreatedAt(Instant.now());
        if (contact.getUpdatedAt() == null) contact.setUpdatedAt(Instant.now());
        Contact savedContact = contactRepository.save(contact);

        // Act: Find the contact by its ID
        Optional<Contact> foundContact = contactRepository.findById(savedContact.getId());

        // Assert: Verify the contact was found and matches the saved one
        assertThat(foundContact).isPresent();
        assertThat(foundContact.get().getId()).isEqualTo(savedContact.getId());
        assertThat(foundContact.get().getName()).isEqualTo("Find Me");
    }

    @Test
    void testFindById_ContactDoesNotExist() {
        // Arrange: No contacts saved (or cleaned up by @BeforeEach)
        String nonExistentId = "nonexistentid123";

        // Act: Attempt to find a contact with a non-existent ID
        Optional<Contact> foundContact = contactRepository.findById(nonExistentId);

        // Assert: Verify no contact was found
        assertThat(foundContact).isNotPresent();
    }

    @Test
    void testFindAll_MultipleContactsExist() {
        // Arrange: Save multiple contacts
        Contact contact1 = new Contact(); contact1.setName("C1"); contact1.setEmail("c1@ex.com"); contact1.setCreatedBy("user1");
        Contact contact2 = new Contact(); contact2.setName("C2"); contact2.setEmail("c2@ex.com"); contact2.setCreatedBy("user2");
        if (contact1.getCreatedAt() == null) contact1.setCreatedAt(Instant.now()); if (contact1.getUpdatedAt() == null) contact1.setUpdatedAt(Instant.now());
        if (contact2.getCreatedAt() == null) contact2.setCreatedAt(Instant.now()); if (contact2.getUpdatedAt() == null) contact2.setUpdatedAt(Instant.now());

        contactRepository.saveAll(List.of(contact1, contact2)); // Save a list

        // Act: Find all contacts
        List<Contact> contacts = contactRepository.findAll();

        // Assert: Verify all contacts were found
        assertThat(contacts).hasSize(2);
        assertThat(contacts).extracting(Contact::getName).containsExactlyInAnyOrder("C1", "C2");
    }

    @Test
    void testDeleteById_ContactExists() {
        // Arrange: Save a contact
        Contact contact = new Contact(); contact.setName("Delete Me"); contact.setEmail("delete@ex.com"); contact.setCreatedBy("deleter");
        if (contact.getCreatedAt() == null) contact.setCreatedAt(Instant.now()); if (contact.getUpdatedAt() == null) contact.setUpdatedAt(Instant.now());
        Contact savedContact = contactRepository.save(contact);

        // Verify it exists before deletion
        assertThat(contactRepository.existsById(savedContact.getId())).isTrue();

        // Act: Delete the contact by ID
        contactRepository.deleteById(savedContact.getId());

        // Assert: Verify the contact no longer exists
        assertThat(contactRepository.existsById(savedContact.getId())).isFalse();
    }

    // --- Custom Derived Query Tests ---

    @Test
    void testFindByCreatedBy_ContactsExistForUser() {
        // Arrange: Save contacts for different users
        Contact user1Contact1 = new Contact(); user1Contact1.setName("U1C1"); user1Contact1.setCreatedBy("user1");
        Contact user1Contact2 = new Contact(); user1Contact2.setName("U1C2"); user1Contact2.setCreatedBy("user1");
        Contact user2Contact1 = new Contact(); user2Contact1.setName("U2C1"); user2Contact1.setCreatedBy("user2");
        if (user1Contact1.getCreatedAt() == null) user1Contact1.setCreatedAt(Instant.now()); if (user1Contact1.getUpdatedAt() == null) user1Contact1.setUpdatedAt(Instant.now());
        if (user1Contact2.getCreatedAt() == null) user1Contact2.setCreatedAt(Instant.now()); if (user1Contact2.getUpdatedAt() == null) user1Contact2.setUpdatedAt(Instant.now());
        if (user2Contact1.getCreatedAt() == null) user2Contact1.setCreatedAt(Instant.now()); if (user2Contact1.getUpdatedAt() == null) user2Contact1.setUpdatedAt(Instant.now());

        contactRepository.saveAll(List.of(user1Contact1, user1Contact2, user2Contact1));

        // Act: Find contacts created by "user1"
        List<Contact> user1Contacts = contactRepository.findByCreatedBy("user1");
        // Act: Find contacts created by "user2"
        List<Contact> user2Contacts = contactRepository.findByCreatedBy("user2");
        // Act: Find contacts created by a user with no contacts
        List<Contact> user3Contacts = contactRepository.findByCreatedBy("user3");


        // Assert: Verify the correct contacts are returned
        assertThat(user1Contacts).hasSize(2);
        assertThat(user1Contacts).extracting(Contact::getName).containsExactlyInAnyOrder("U1C1", "U1C2");

        assertThat(user2Contacts).hasSize(1);
        assertThat(user2Contacts).extracting(Contact::getName).containsExactlyInAnyOrder("U2C1");

        assertThat(user3Contacts).isEmpty(); // Should be empty for a user with no contacts
    }

    @Test
    void testExistsByEmail_EmailExists() {
        // Arrange: Save a contact with a known email
        Contact contact = new Contact(); contact.setName("E1"); contact.setEmail("exists@ex.com"); contact.setCreatedBy("user1");
        if (contact.getCreatedAt() == null) contact.setCreatedAt(Instant.now()); if (contact.getUpdatedAt() == null) contact.setUpdatedAt(Instant.now());
        contactRepository.save(contact);

        // Act: Check if the email exists
        boolean exists = contactRepository.existsByEmail("exists@ex.com");
        boolean notExists = contactRepository.existsByEmail("nonexistent@ex.com");


        // Assert: Verify the existence check results
        assertThat(exists).isTrue();
        assertThat(notExists).isFalse();
    }

    @Test
    void testExistsByEmailAndIdNot_EmailExistsForOtherContact() {
        // Arrange: Save two contacts with the same email, but different IDs
        Contact contact1 = new Contact(); contact1.setName("Same Email 1"); contact1.setEmail("same@ex.com"); contact1.setCreatedBy("user1");
        Contact contact2 = new Contact(); contact2.setName("Same Email 2"); contact2.setEmail("same@ex.com"); contact2.setCreatedBy("user2"); // Same email
        if (contact1.getCreatedAt() == null) contact1.setCreatedAt(Instant.now()); if (contact1.getUpdatedAt() == null) contact1.setUpdatedAt(Instant.now());
        if (contact2.getCreatedAt() == null) contact2.setCreatedAt(Instant.now()); if (contact2.getUpdatedAt() == null) contact2.setUpdatedAt(Instant.now());

        Contact savedContact1 = contactRepository.save(contact1);
        Contact savedContact2 = contactRepository.save(contact2);


        // Act: Check if email "same@ex.com" exists, EXCLUDING contact1's ID
        // It should return true because contact2 has that email
        boolean existsExcludingContact1 = contactRepository.existsByEmailAndIdNot("same@ex.com", savedContact1.getId());

        // Act: Check if email "same@ex.com" exists, EXCLUDING contact2's ID
        // It should return true because contact1 has that email
        boolean existsExcludingContact2 = contactRepository.existsByEmailAndIdNot("same@ex.com", savedContact2.getId());

        // Act: Check if email "same@ex.com" exists, EXCLUDING a non-existent ID
        // It should return true because both contacts have that email
        boolean existsExcludingNonExistent = contactRepository.existsByEmailAndIdNot("same@ex.com", "nonexistentid");

        // Act: Check if email "unique@ex.com" exists, EXCLUDING contact1's ID (no one has this email)
        boolean notExistsExcluding = contactRepository.existsByEmailAndIdNot("unique@ex.com", savedContact1.getId());


        // Assert: Verify the existence check results
        assertThat(existsExcludingContact1).isTrue();
        assertThat(existsExcludingContact2).isTrue();
        assertThat(existsExcludingNonExistent).isTrue();
        assertThat(notExistsExcluding).isFalse();
    }

    @Test
    void testExistsByEmailAndIdNot_EmailExistsOnlyForThisContact() {
        // Arrange: Save one contact with a unique email
        Contact contact = new Contact(); contact.setName("Unique Email"); contact.setEmail("unique@ex.com"); contact.setCreatedBy("user");
        if (contact.getCreatedAt() == null) contact.setCreatedAt(Instant.now()); if (contact.getUpdatedAt() == null) contact.setUpdatedAt(Instant.now());
        Contact savedContact = contactRepository.save(contact);

        // Act: Check if email "unique@ex.com" exists, EXCLUDING its OWN ID
        // It should return false because the only contact with that email is being excluded
        boolean existsExcludingSelf = contactRepository.existsByEmailAndIdNot("unique@ex.com", savedContact.getId());

        // Assert: Verify the existence check results
        assertThat(existsExcludingSelf).isFalse();
    }


    @Test
    void testExistsByPhoneNumber_PhoneNumberExists() {
        // Arrange: Save a contact with a known phone number
        Contact contact = new Contact(); contact.setName("P1"); contact.setPhoneNumber("1112223333"); contact.setCreatedBy("user1");
        if (contact.getCreatedAt() == null) contact.setCreatedAt(Instant.now()); if (contact.getUpdatedAt() == null) contact.setUpdatedAt(Instant.now());
        contactRepository.save(contact);

        // Act: Check if the phone number exists
        boolean exists = contactRepository.existsByPhoneNumber("1112223333");
        boolean notExists = contactRepository.existsByPhoneNumber("9998887777");

        // Assert: Verify the existence check results
        assertThat(exists).isTrue();
        assertThat(notExists).isFalse();
    }

    @Test
    void testExistsByPhoneNumberAndIdNot_PhoneNumberExistsForOtherContact() {
        // Arrange: Save two contacts with the same phone number, but different IDs
        Contact contact1 = new Contact(); contact1.setName("Same Phone 1"); contact1.setPhoneNumber("same-phone"); contact1.setCreatedBy("user1");
        Contact contact2 = new Contact(); contact2.setName("Same Phone 2"); contact2.setPhoneNumber("same-phone"); contact2.setCreatedBy("user2"); // Same phone
        if (contact1.getCreatedAt() == null) contact1.setCreatedAt(Instant.now()); if (contact1.getUpdatedAt() == null) contact1.setUpdatedAt(Instant.now());
        if (contact2.getCreatedAt() == null) contact2.setCreatedAt(Instant.now()); if (contact2.getUpdatedAt() == null) contact2.setUpdatedAt(Instant.now());

        Contact savedContact1 = contactRepository.save(contact1);
        Contact savedContact2 = contactRepository.save(contact2);

        // Act: Check if phone "same-phone" exists, EXCLUDING contact1's ID
        boolean existsExcludingContact1 = contactRepository.existsByPhoneNumberAndIdNot("same-phone", savedContact1.getId());

        // Act: Check if phone "same-phone" exists, EXCLUDING contact2's ID
        boolean existsExcludingContact2 = contactRepository.existsByPhoneNumberAndIdNot("same-phone", savedContact2.getId());

        // Act: Check if phone "unique-phone" exists, EXCLUDING contact1's ID (no one has this phone)
        boolean notExistsExcluding = contactRepository.existsByPhoneNumberAndIdNot("unique-phone", savedContact1.getId());

        // Assert: Verify the existence check results
        assertThat(existsExcludingContact1).isTrue();
        assertThat(existsExcludingContact2).isTrue();
        assertThat(notExistsExcluding).isFalse();
    }

    @Test
    void testExistsByPhoneNumberAndIdNot_PhoneNumberExistsOnlyForThisContact() {
        // Arrange: Save one contact with a unique phone number
        Contact contact = new Contact(); contact.setName("Unique Phone"); contact.setPhoneNumber("unique-phone"); contact.setCreatedBy("user");
        if (contact.getCreatedAt() == null) contact.setCreatedAt(Instant.now()); if (contact.getUpdatedAt() == null) contact.setUpdatedAt(Instant.now());
        Contact savedContact = contactRepository.save(contact);

        // Act: Check if phone "unique-phone" exists, EXCLUDING its OWN ID
        boolean existsExcludingSelf = contactRepository.existsByPhoneNumberAndIdNot("unique-phone", savedContact.getId());

        // Assert: Verify the existence check results
        assertThat(existsExcludingSelf).isFalse();
    }


    // Helper method if you have specific Contact constructors or need more complex setup
    /*
    private Contact createContact(String name, String email, String phoneNumber, String createdBy) {
        Contact contact = new Contact();
        contact.setName(name);
        contact.setEmail(email);
        contact.setPhoneNumber(phoneNumber);
        contact.setCreatedBy(createdBy);
         if (contact.getCreatedAt() == null) contact.setCreatedAt(Instant.now());
         if (contact.getUpdatedAt() == null) contact.setUpdatedAt(Instant.now());
        return contact;
    }
    */
}