package com.example.kitchensink.model; // Match your model package

import org.junit.jupiter.api.Test; // For marking test methods

// Import AssertJ's exception assertion methods
import static org.assertj.core.api.Assertions.assertThat; // For standard assertions
import static org.assertj.core.api.Assertions.assertThatThrownBy; // Import for asserting thrown exceptions


// This is the unit test class for your Role enum
class RoleTests { // ===> Renamed the class to match the enum Role <===

    @Test
    void testEnumConstantsExist() {
        // Test that the enum constants exist and are not null
        assertThat(Role.ROLE_USER).isNotNull();
        assertThat(Role.ROLE_ADMIN).isNotNull();
    }

    @Test
    void testEnumNamesMatchExpectedStrings() {
        // Test that the standard enum.name() method returns the expected strings
        assertThat(Role.ROLE_USER.name()).isEqualTo("ROLE_USER");
        assertThat(Role.ROLE_ADMIN.name()).isEqualTo("ROLE_ADMIN");
    }

    @Test
    void testEnumValuesMethod() {
        // Test the standard values() method
        Role[] values = Role.values();
        assertThat(values).isNotNull().hasSize(2); // Assuming only 2 roles
        assertThat(values).containsExactlyInAnyOrder(Role.ROLE_USER, Role.ROLE_ADMIN);
    }

    @Test
    void testEnumValueOfMethod() {
        // Test the standard valueOf() method for valid values
        assertThat(Role.valueOf("ROLE_USER")).isEqualTo(Role.ROLE_USER);
        assertThat(Role.valueOf("ROLE_ADMIN")).isEqualTo(Role.ROLE_ADMIN);

        // --- Test valueOf with invalid name throws IllegalArgumentException ---
        // Use assertThatThrownBy to assert that the lambda throws an exception
        assertThatThrownBy(
                () -> Role.valueOf("INVALID_ROLE") // The code that is expected to throw
        ).isInstanceOf(IllegalArgumentException.class) // Assert the exception type
                .hasMessageContaining("No enum constant"); // Assert part of the exception message
    }

    // Add tests for @Getter if Role enum has specific fields/methods generated by Lombok (uncommon for simple enums)
}