package com.example.kitchensink.model; // Match your model package

import org.junit.jupiter.api.Test; // For marking test methods
import java.util.HashSet; // Import
import java.util.Set; // Import

import static org.assertj.core.api.Assertions.assertThat; // For assertions

class JwtAuthenticationResponseTests {

    // ===> REMOVE testNoArgsConstructor as the class doesn't have one <===
    /*
    @Test
    void testNoArgsConstructor() {
        // This test will fail compilation as NoArgsConstructor is missing
        JwtAuthenticationResponse response = new JwtAuthenticationResponse();
        assertThat(response).isNotNull();
        assertThat(response.getAccessToken()).isNull();
        assertThat(response.getUsername()).isNull();
        assertThat(response.getRoles()).isNull(); // Or empty set depending on default init
    }
    */


    @Test
    void testAllArgsConstructor() {
        String accessToken = "testAccessToken";
        String tokenType = "Bearer"; // ===> Assume tokenType field exists based on error message <===
        String username = "testuser";
        Set<String> roles = new HashSet<>(Set.of("ROLE_USER", "ROLE_ADMIN"));

        // ===> Use the 4-argument constructor generated by @AllArgsConstructor <===
        JwtAuthenticationResponse response = new JwtAuthenticationResponse(accessToken, tokenType, username, roles);

        assertThat(response).isNotNull();
        assertThat(response.getAccessToken()).isEqualTo(accessToken);
        // ===> Assert the tokenType field <===
        assertThat(response.getTokenType()).isEqualTo(tokenType); // Assuming getTokenType() exists
        assertThat(response.getUsername()).isEqualTo(username);
        assertThat(response.getRoles()).isEqualTo(roles);
    }

    @Test
    void testSettersAndGetters() {
        // ===> Initialize using the AllArgsConstructor <===
        // You need initial values, even if they are null or defaults, to create the object.
        // Assuming 4-argument constructor: (accessToken, tokenType, username, roles)
        JwtAuthenticationResponse response = new JwtAuthenticationResponse(null, null, null, null); // Use AllArgsConstructor with nulls

        String accessToken = "testAccessToken";
        String tokenType = "Bearer"; // ===> Assume tokenType field exists <===
        String username = "testuser";
        Set<String> roles = new HashSet<>(Set.of("ROLE_USER"));

        response.setAccessToken(accessToken);
        response.setTokenType(tokenType); // ===> Assuming setTokenType() exists <===
        response.setUsername(username);
        response.setRoles(roles);

        assertThat(response.getAccessToken()).isEqualTo(accessToken);
        assertThat(response.getTokenType()).isEqualTo(tokenType); // ===> Assuming getTokenType() exists <===
        assertThat(response.getUsername()).isEqualTo(username);
        assertThat(response.getRoles()).isEqualTo(roles);
    }

    // Add equals/hashCode/toString tests if needed based on your model definition
}